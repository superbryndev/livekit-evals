name: Publish to PyPI

on:
  push:
    branches:
      - main
    paths:
      - 'livekit_evals/**'
      - 'pyproject.toml'
      - 'MANIFEST.in'

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine bump2version
      
      - name: Auto-increment version
        run: |
          # Get last commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"
          
          # Determine version bump type from commit message
          if echo "$COMMIT_MSG" | grep -qiE '\[major\]|BREAKING CHANGE'; then
            echo "Bumping MAJOR version (breaking changes)"
            bump2version major --allow-dirty --no-commit --no-tag
          elif echo "$COMMIT_MSG" | grep -qiE '\[minor\]|feat:'; then
            echo "Bumping MINOR version (new features)"
            bump2version minor --allow-dirty --no-commit --no-tag
          else
            echo "Bumping PATCH version (bug fixes)"
            bump2version patch --allow-dirty --no-commit --no-tag
          fi
          
          # Show new version
          NEW_VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "Publishing version: $NEW_VERSION"
      
      - name: Commit version bump
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add pyproject.toml livekit_evals/__init__.py .bumpversion.cfg
          git commit -m "Bump version [skip ci]" || echo "No changes to commit"
          git push || echo "Nothing to push"
      
      - name: Build package
        run: python -m build
      
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/*

